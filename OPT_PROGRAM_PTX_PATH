//
// Generated by LLVM NVPTX Back-End
//

.version 5.0
.target sm_60, texmode_independent
.address_size 64

	// .globl	A                       // -- Begin function A
.func  (.param .b64 func_retval0) _Z13get_global_idj
(
	.param .b32 _Z13get_global_idj_param_0
)
;
                                        // @A
.entry A(
	.param .u64 .ptr .global .align 4 A_param_0,
	.param .u64 .ptr .global .align 4 A_param_1,
	.param .u64 .ptr .global .align 4 A_param_2,
	.param .u32 A_param_3
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<5>;
	.reg .b32 	%r<4>;
	.reg .b64 	%rd<5>;

// %bb.0:                               // %entry
	mov.u32 	%r1, 0;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b32 param0;
	st.param.b32 	[param0+0], %r1;
	.param .b64 retval0;
	call.uni (retval0), 
	_Z13get_global_idj, 
	(
	param0
	);
	ld.param.b64 	%rd3, [retval0+0];
	} // callseq 0
	cvt.u32.u64 	%r2, %rd3;
	ld.param.u32 	%r3, [A_param_3];
	setp.ge.s32 	%p1, %r2, %r3;
	@%p1 bra 	LBB0_2;
// %bb.1:                               // %for.body.preheader
	ld.param.u64 	%rd2, [A_param_2];
	ld.param.u64 	%rd1, [A_param_1];
	ld.global.f32 	%f1, [%rd1];
	rcp.rn.f32 	%f2, %f1;
	st.global.f32 	[%rd2], %f2;
	ld.global.f32 	%f3, [%rd1+4];
	rcp.rn.f32 	%f4, %f3;
	st.global.f32 	[%rd2+4], %f4;
LBB0_2:                                 // %cleanup
	ret;
                                        // -- End function
}
 

